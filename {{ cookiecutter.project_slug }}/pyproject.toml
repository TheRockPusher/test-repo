[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
license = { text = "{% if cookiecutter.license == 'MIT' %}MIT{% elif cookiecutter.license == 'GPL-3.0-only' %}GPL-3.0-only{% else %}AGPL-3.0-only{% endif %}" }
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
keywords = ["template", "packaging", "uv", "modern-python", "best-practices"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    {% if cookiecutter.license == 'MIT' %}"License :: OSI Approved :: MIT License"{% elif cookiecutter.license == 'GPL-3.0-only' %}"License :: OSI Approved :: GNU General Public License v3 (GPLv3)"{% else %}"License :: OSI Approved :: GNU Affero General Public License v3"{% endif %},
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: {{ cookiecutter.python_version }}",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = []

[project.urls]
Homepage = "{{ cookiecutter.github_url }}"
Repository = "{{ cookiecutter.github_url }}"
Documentation = "{{ cookiecutter.github_url }}#readme"
Issues = "{{ cookiecutter.github_url }}/issues"

[project.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.package_slug }}:main"

[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.14.1",
    "ty>=0.0.1a23",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "-v",
    "--durations=10",
    "--cov={{ cookiecutter.package_slug }}",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--cov-report=xml"
]

[tool.ruff]
target-version = "py{{ cookiecutter.python_version | replace('.', '') }}"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "N",
    "UP",
    "B",
    "S",
    "BLE",
    "T10",
    "C4",
    "SIM",
    "A",
    "ARG",
    "PTH",
    "PT",
    "PL",
    "D",
    "ANN",
    "RUF",
]
ignore = [
    "D203",
    "D213",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ["S101", "ANN", "D"]
"**/__init__.py" = ["D104"]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
